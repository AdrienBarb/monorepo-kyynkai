datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String  @id
  name          String?
  image         String?
  email         String
  emailVerified Boolean
  utmTracking   Json?
  trackdeskCid  Json?
  creditBalance Int     @default(0)
  originGuestId String?

  createdAt         DateTime
  updatedAt         DateTime
  sessions          Session[]
  accounts          Account[]
  conversations     Conversation[]
  CreditTransaction CreditTransaction[]
  roles             UserRole[]          @default([USER])
  CreditSale        CreditSale[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model AIGirlfriend {
  id                String   @id @default(cuid())
  pseudo            String   @unique
  slug              String   @unique
  profileImageId    String
  profileVideoId    String?
  age               Int      @default(40)
  isActive          Boolean  @default(true)
  hook              String?
  chatOpeningLine   Json?
  traits            String[] @default([])
  archetype         String?
  voice             String?
  boundaries        String[] @default([])
  styleReminders    String[] @default([])
  petNames          String[] @default([])
  emojiRatio        Float    @default(0.1)
  sentenceLength    String?  @default("short")
  aftercare         Boolean  @default(true)
  consentChecks     String[] @default([])
  genTemperature    Float    @default(0.9)
  genTopP           Float    @default(0.9)
  genMaxTokens      Int      @default(220)
  visualStylePrompt String?
  version           String   @default("v1")
  faceIdKey         String?

  bodyBuild String? // slim | fit | curvy | athletic | petite | tall | average
  bustSize  String? // small | medium | full
  hipSize   String? // narrow | average | wide
  hairColor String? // blonde | brown | black | red | auburn | chestnut | raven | platinum | ginger | copper | silver
  hairStyle String? // straight | wavy | curly | bob | pixie | braided | layered
  skinTone  String? // fair | light | medium | tan | olive | deep | caramel

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversations Conversation[]
  posts         Post[]
  fantasies     Fantasy[]

  @@index([isActive, slug])
  @@map("ai_girlfriend")
}

model Conversation {
  id             String   @id @default(cuid())
  userId         String?
  aiGirlfriendId String
  isActive       Boolean  @default(true)
  lastMessageAt  DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiGirlfriend   AIGirlfriend     @relation(fields: [aiGirlfriendId], references: [id], onDelete: Cascade)
  messages       Message[]
  Guest          Guest?           @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId        String?
  freeGuestUsed  Boolean          @default(false)
  generatedMedia GeneratedMedia[]

  @@unique([userId, aiGirlfriendId])
  @@unique([guestId, aiGirlfriendId])
  @@index([userId])
  @@index([guestId])
  @@index([aiGirlfriendId])
  @@index([lastMessageAt])
}

model Guest {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
}

model Media {
  id          String          @id @default(cuid())
  type        MediaType
  mediaKey    String
  visibility  MediaVisibility @default(PUBLIC)
  unlockUsers String[]        @default([])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  posts Post[]

  @@index([type])
}

model Message {
  id               String        @id @default(cuid())
  conversationId   String
  sender           MessageSender
  content          String
  generatedMediaId String?
  isRead           Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  conversation   Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  generatedMedia GeneratedMedia? @relation(fields: [generatedMediaId], references: [id], onDelete: SetNull)

  @@index([conversationId])
  @@index([createdAt])
  @@index([generatedMediaId])
}

model CreditTransaction {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  packageId             Int
  amountCents           Int
  currency              String
  credits               Int
  stripePaymentIntentId String
  status                TransactionStatus @default(PROCESSING)

  createdAt DateTime @default(now())
}

model CreditSale {
  id        String         @id @default(cuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      CreditSaleType
  amount    Int
  createdAt DateTime       @default(now())
}

model GeneratedMedia {
  id             String           @id @default(cuid())
  type           MediaType
  status         GenerationStatus @default(PENDING)
  mediaKey       String?
  externalId     String?
  userId         String
  conversationId String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@index([userId])
  @@index([status])
  @@index([externalId])
  @@index([conversationId])
}

model Post {
  id             String   @id @default(cuid())
  aiGirlfriendId String
  content        String
  mediaId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  aiGirlfriend AIGirlfriend @relation(fields: [aiGirlfriendId], references: [id], onDelete: Cascade)
  media        Media?       @relation(fields: [mediaId], references: [id], onDelete: SetNull)

  @@index([aiGirlfriendId])
  @@index([createdAt])
  @@index([mediaId])
}

enum MediaType {
  IMAGE
  VIDEO
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum MessageSender {
  USER
  AI
}

enum TransactionStatus {
  SUCCEEDED
  PROCESSING
  CANCELED
  REFUNDED
}

enum CreditSaleType {
  CHAT
  MEDIA
  NUDE
}

enum UserRole {
  USER
  ADMIN
}

enum MediaVisibility {
  PUBLIC
  PRIVATE
}

model Fantasy {
  id             String   @id @default(cuid())
  aiGirlfriendId String
  title          String
  description    String
  mediaUrl       String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  steps        FantasyStep[]
  aiGirlfriend AIGirlfriend  @relation(fields: [aiGirlfriendId], references: [id], onDelete: Cascade)

  @@index([aiGirlfriendId])
  @@index([isActive])
}

model FantasyStep {
  id        String @id @default(cuid())
  fantasyId String
  order     Int
  text      String

  choices FantasyChoice[]
  fantasy Fantasy         @relation(fields: [fantasyId], references: [id], onDelete: Cascade)

  @@index([fantasyId])
  @@index([order])
}

model FantasyChoice {
  id         String  @id @default(cuid())
  stepId     String
  label      String
  mediaUrl   String
  nextStepId String?
  cost       Int?

  step FantasyStep @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@index([stepId])
}
